class CatsTrie:
    CAT_DICTIONARY_SIZE = 26
    def __init__(self, sentences: list):
        self.sentences = sentences
        self.trie = TrieNode(None)
        self.build_trie()
    
    def build_trie(self):
        for sentence in self.sentences:
            self.add_sentence(sentence)

    def add_sentence(self, sentence: str):
        current_node = self.trie
        for i, char in enumerate(sentence):
            if i == len(sentence) - 1:
                is_end_of_word = True
            index = ord(char) - ord('a')
            if self.trie[index] is None:
                self.trie[index] = TrieNode(char)
            current_node = self.trie[index]

class TrieNode:
    CAT_DICTIONARY_SIZE = 26
    def __init__(self, char: str, is_end_of_word = False: bool):
        self.char = char
        self.children = [None for i in range(self.CAT_DICTIONARY_SIZE)]
        self.is_end_of_word = is_end_of_word

    def add_child(self, child: TrieNode):
        self.children[child.get_char_index()] = child

    def get_char_index(self):
        return ord(self.char) - ord('a')
    
    def not_end_of_word(self):
        self.is_end_of_word = False