class TrieNode:
    CAT_DICTIONARY_SIZE = 26
    def __init__(self, char: str):
        """
        Function description: create a trie node with a character and a list of children nodes (initially empty)
        no children added, is_end_of_word is True
        :Input:
        char: character of the node
        :Output, return or postcondition: a trie node
        :Time complexity: O(1) - cat dictionary is constant size
        :Aux space complexity: O(1) - cat dictionary is constant size
        """
        if char:        
            self.char = char
        else: self.char = "None"
        self.children = [None for i in range(self.CAT_DICTIONARY_SIZE)]
        self.is_end_of_word = True

    def add_child(self, child):
        """
        Function description: add a child to the current node
        as the child is added, is_end_of_word is False
        :Input:
        child: a trie node
        :Output, return or postcondition: none
        :Time complexity: O(1)
        :Aux space complexity: O(0)
        """
        self.children[child.get_char_index()] = child
        self.is_end_of_word = False
    
    def get_child(self, char: str):
        """
        Function description: get a child to the current node by character
        :Input:
        char: a character
        :Output, return or postcondition: trie node or None representing the child
        :Time complexity: O(1)
        :Aux space complexity: O(0)
        """
        return self.children[ord(char) - ord('a')]

    def get_char_index(self):
        """
        Function description: get the index of the character in the cat dictionary to map to the children list
        :Input: NA
        :Output, return or postcondition: int representing the index of the character in the cat dictionary
        :Time complexity: O(1)
        :Aux space complexity: O(0)
        """
        return ord(self.char) - ord('a')
    
    def not_end_of_word(self):
        """
        Function description: set is_end_of_word to False
        :Input: NA
        :Postcondition: is_end_of_word is False
        :Time complexity: O(1)
        :Aux space complexity: O(0)
        """
        self.is_end_of_word = False

    def is_end_of_word(self):
        """
        Function description: checks if the self is a node at the end of a word
        :Input: NA
        :Output: bool representing if the node is at the end of a word
        :Time complexity: O(1)
        :Aux space complexity: O(0)
        """
        return self.is_end_of_word
    
    def __str__(self):
        """
        Function description: returns a string representation of the node
        :Input: NA
        :Output: string representation of the node
        :Time complexity: O(1)
        :Aux space complexity: O(0)
        """
        return self.char
    
    def visualise(self):
        """
        Function description: visualise the trie
        :Input: NA
        :Output: NA
        :Time complexity: O(n) where n is the number of nodes in the trie
        :Aux space complexity: O(0)
        """
        self.visualise_helper(self, 0)
    
    def visualise_helper(self, node, level):
        """
        Function description: visualise the trie
        :Input: NA
        :Output: NA
        :Time complexity: O(n) where n is the number of nodes in the trie
        :Aux space complexity: O(0)
        """
        if node:
            print(' ' * level, node)
            for child in node.children:
                self.visualise_helper(child, level + 1)



class CatsTrie:
    CAT_DICTIONARY_SIZE = 26
    def __init__(self, sentences: list):
        self.sentences = sentences
        self.trie = TrieNode(None)
        self.build_trie()
    
    def build_trie(self):
        for sentence in self.sentences:
            self.add_sentence(sentence)

    def add_sentence(self, sentence: str):
        current_node = self.trie
        for char in sentence:
            if not current_node.get_child(char):
                current_node.add_child(TrieNode(char))
            current_node = current_node.get_child(char)


# main
if __name__ == '__main__':
    sentences = ["abc", "abazacy", "dbcef", "xzz", "gdbc", "abazacy", "xyz", "abazacy", "dbcef", "xyz", "xxx", "xzz"]
    cats_trie = CatsTrie(sentences)
    cats_trie.trie.visualise()
    print()